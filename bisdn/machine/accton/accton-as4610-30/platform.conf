# Accton AS4610_30 specific info

# over ride default behaviour

getonboard_block_device() {
    blk_dev=
    for i in a b; do
        [ -n "$(ls -l /sys/block/sd${i}/device 2>/dev/null | grep '1-2.3:1.0')" ] && {
            blk_dev="sd${i}"
            break
        }
    done
    echo "/dev/$blk_dev"
}

demo_part=

create_gpt_partition() {
    local blk_dev="$1"
    local label="$2"
    local size="$3"
    local last_part part attr_bitmask

    # fixup early MBR partitions
    sgdisk -v $blk_dev | grep -q "converting MBR" && sgdisk -g $blk_dev

    part=$(sgdisk -p $blk_dev | grep "$2" | awk '{print $1}')
    if [ -n "$part" ]; then
        # TODO: backup existing config
        sgdisk -d $part $blk_dev || {
           echo "Error: Unable to delete partition $part on $blk_dev"
           exit 1
        }
        partprobe
    else
	local oIFS parts part_num part_label

	oIFS=$IFS
	IFS="
"
	# remove all other NOS partitions

	# ugly: find a better way to get only partitions
	parts="$(sgdisk -p /dev/sda | grep '^ ' || true)"
	for part in $parts; do
		part_num="$(echo $part | awk '{print $1}')"
		part_label="$(echo $part | awk '{print $7}')"

		# keep diag partition intact
		[ "$part_label" = "ACCTON-DIAG" ] && continue
		echo "removing partition $blk_dev$part_num ($part_label)"
		sgdisk -d $part_num $blk_dev || {
			echo "Error: unable to delete partition $part_num on $blk_dev"
			exit 1
		}
	done
        IFS=$oIFS
	partprobe
    fi

    last_part=$(sgdisk -p $blk_dev | tail -n 1 | awk '{print $1}')
    # empty table will catch the header instead
    [ "$last_part" = "Number" ] && last_part=0
    part=$(( $last_part + 1 ))

    # Create new partition
    echo "Creating new partition ${blk_dev}$part ..."

    attr_bitmask="0x0"
    sgdisk --new=${part}::+${size}MB \
        --attributes=${part}:=:$attr_bitmask \
        --change-name=${part}:$label $blk_dev || {
        echo "Error: Unable to create partition $part on $blk_dev"
        exit 1
    }
    partprobe
    demo_part=$part
}
create_msdos_partition()
{
    local blk_dev="$1"
    local label="$2"
    local size="$3"
    local sectors_per_mb=2048
    local last_part part part_info last_part_end part_start part_end

    # See if demo partition already exists -- look for the filesystem
    # label.
    part_info="$(blkid | grep $label | awk -F: '{print $1}')"
    if [ -n "$part_info" ] ; then
        # delete existing partition
        part="$(echo -n $part_info | sed -e s#${blk_dev}##)"
        parted -s $blk_dev rm $demo_part || {
            echo "Error: Unable to delete partition $part on $blk_dev"
            exit 1
        }
        partprobe
    fi

    # Find next available partition
    part_info="$(parted -s -m $blk_dev unit s print | tail -n 1)"
    last_part="$(echo -n $part_info | awk -F: '{print $1}')"
    last_part_end="$(echo -n $part_info | awk -F: '{print $3}')"
    # Remove trailing 's'
    last_part_end=${last_part_end%s}
    part=$(( $last_part + 1 ))
    part_start=$(( $last_part_end + 1 ))
    # sectors_per_mb = (1024 * 1024) / 512 = 2048
    sectors_per_mb=2048
    part_end=$(( $part_start + ( $size * $sectors_per_mb ) - 1 ))

    # Create new partition
    echo "Creating new demo partition ${blk_dev}$demo_part ..."
    parted -s --align optimal $blk_dev unit s \
      mkpart primary $part_start $part_end set $part boot on || {
        echo "ERROR: Problems creating demo msdos partition $part on: $blk_dev"
        exit 1
    }
    partprobe
    demo_part=$part
}

install_uimage() {
    local bootcmd

    demo_volume_label="BISDN-Linux"

    # determine ONIE partition type
    onie_partition_type=$(onie-sysinfo -t)

    if [ "$onie_partition_type" = "gpt" ] ; then
        create_bisdn_partition="create_gpt_partition"
    elif [ "$onie_partition_type" = "msdos" ] ; then
        create_bisdn_partition="create_msdos_partition"
    else
       echo "ERROR: Unsupported partition type: $onie_partition_type"
       exit 1
    fi

    [ -n $DEBUG ] && echo "DEBUG: onie_partition_type=${onie_partition_type}"

    blk_dev=$(getonboard_block_device)
    fs_type=ext4

    eval $create_bisdn_partition $blk_dev $demo_volume_label 1024
    [ -n "$demo_part" ] || exit 1

    demo_dev=${blk_dev}${demo_part}
    mkfs.$fs_type -L $demo_volume_label $demo_dev || {
      echo "Error: unable to create demo file system on $demo_dev"
      exit 1
    }

    # copy stuff to partition
    demo_mnt=$(mktemp -d) || {
      echo "Error: unable to create demo file system mount point"
      exit 1
    }

    mount -t $fs_type -o defaults,rw $demo_dev $demo_mnt || {
      echo "Error: unable to mount $demo_dev on $demo_mnt"
      exit 1
    }

    if [ -f rootfs.cpio.gz ]; then
        image_archive=$(realpath rootfs.cpio.gz)
        cd $demo_mnt
        zcat $image_archive | cpio -i
    elif [ -f rootfs.tar.xz ]; then
        xzcat rootfs.tar.xz | tar xf - -C $demo_mnt
    else
        echo "Error: invalid rootfs"
    fi

    [ -f fitImage ] && cp fitImage $demo_mnt/boot/uImage

    onie-support $demo_mnt
    sync
    umount $demo_mnt || echo "Error: failed to unmount $demo_mnt"

    # ugly, fixup bootcmd from picos to nos
    bootcmd=$(fw_printenv bootcmd)
    if [ "$bootcmd" = "bootcmd=run check_boot_reason;run picos_bootcmd;run onie_bootcmd" ]; then
        echo "Fixing up bootcmd from picos to nos"
        fw_setenv -f bootcmd "run check_boot_reason;run nos_bootcmd;run onie_bootcmd"
    fi
}

hw_load() {
    local platform=$(onie-syseeprom -g 0x21)

    case "$platform" in
    "4610-30T"*)
        configuration="#conf@arm-accton-as4610-30t.dtb"
        ;;
    "4610-30P"*)
        configuration="#conf@arm-accton-as4610-30p.dtb"
        ;;
    "4610-54T"*)
        configuration="#conf@arm-accton-as4610-54t.dtb"
        ;;
    "4610-54P"*)
        configuration="#conf@arm-accton-as4610-54p.dtb"
        ;;
    *)
        echo "Unknown platform \"$platform\", using default configuration"
        ;;
    esac

    echo "usb start; setenv bootargs root=/dev/sda${demo_part} rw noinitrd console=\$consoledev,\$baudrate rootdelay=10; ext2load usb 0:${demo_part} \$loadaddr boot/uImage;bootm \${loadaddr}${configuration}"
}

