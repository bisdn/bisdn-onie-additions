# Accton AS4610_30 specific info

# over ride default behaviour

getonboard_block_device() {
    blk_dev=
    for i in a b; do
        [ -n "$(ls -l /sys/block/sd${i}/device 2>/dev/null | grep '1-2.3:1.0')" ] && {
            blk_dev="sd${i}"
            break
        }
    done
    echo "/dev/$blk_dev"
}

install_uimage() {
    demo_volume_label="BISDN-Linux"
    local bootcmd
    blk_dev=$(getonboard_block_device)
    fs_type=ext4

    # check if partition table exist
    parted -s -m /dev/sda unit s print 2>&1 >/dev/null || {
    	# create if not
	parted $blk_dev mklabel msdos
    }
    part_info="$(blkid | grep $demo_volume_label | awk -F: '{print $1}')"
    # check if partition exists
    if [ -n "$part_info" ]; then
        # TODO backup config
        demo_part="$(echo -n $part_info | sed -e s#${blk_dev}##)"
    	# erase if
	parted -s $blk_dev rm $demo_part || {
		echo "Error: Unable to delete partition $demo_part on $blk_dev"
		exit 1
	}
	partprobe
    else
        # always the first one
        demo_part="1"
    fi

    # create partition
    parted -s --align optimal $blk_dev unit s mkpart primary "0%" 1G
    demo_dev=${blk_dev}${demo_part}
    mkfs.$fs_type -L $demo_volume_label $demo_dev || {
      echo "Error: unable to create demo file system on $demo_dev"
      exit 1
    }

    # copy stuff to partition
    demo_mnt=$(mktemp -d) || {
      echo "Error: unable to create demo file system mount point"
      exit 1
    }

    mount -t $fs_type -o defaults,rw $demo_dev $demo_mnt || {
      echo "Error: unable to mount $demo_dev on $demo_mnt"
      exit 1
    }

    if [ -f rootfs.cpio.gz ]; then
        image_archive=$(realpath rootfs.cpio.gz)
        cd $demo_mnt
        zcat $image_archive | cpio -i
    elif [ -f rootfs.tar.xz ]; then
        xzcat rootfs.tar.xz | tar xf - -C $demo_mnt
    else
        echo "Error: invalid rootfs"
    fi

    [ -f fitImage ] && cp fitImage $demo_mnt/boot/uImage

    onie-support $demo_mnt
    sync
    umount $demo_mnt || echo "Error: failed to unmount $demo_mnt"

    # ugly, fixup bootcmd from picos to nos
    bootcmd=$(fw_printenv bootcmd)
    if [ "$bootcmd" = "bootcmd=run check_boot_reason;run picos_bootcmd;run onie_bootcmd" ]; then
        echo "Fixing up bootcmd from picos to nos"
        fw_setenv -f bootcmd "run check_boot_reason;run nos_bootcmd;run onie_bootcmd"
    fi
}

hw_load() {
    echo "usb start; setenv bootargs root=/dev/sda1 rw noinitrd console=\$consoledev,\$baudrate rootdelay=10; ext2load usb 0:1 \$loadaddr boot/uImage;bootm \$loadaddr"
}

